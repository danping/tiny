/* ****************************************************** extensions.cpp *** *
 * 補助関数
 *
 * Copyright (C) 2004-2006 Yasuyuki SUGAYA <sugaya@suri.it.okayama-u.ac.jp>
 *
 *                                    Time-stamp: <2008-03-07 13:50:57 sugaya>
 * ************************************************************************* */
#include <cstdio>
#include <cstdlib>
#include "matrix.h"
#include "extensions.h"

/* ************************************************************************* *
 * Matrixクラスから２次元配列データを作成する関数
 *
 * 入力
 *	a : 行列データ
 *
 * 戻り値
 *	b : ２次元配列データ
 * ************************************************************************* */
double**
convert_from_matrix (const Matrix&	a) {
  double	**b;
  int		n, m;

  b = new double_ptr [a.Row()];
  for (n = 0; n < a.Row(); n++) {
    b[n] = new double [a.Column()];
    for (m = 0; m < a.Column(); m++) {
      b[n][m] = a[n][m];
    }
  }
  return b;
}

/* ************************************************************************* *
 * ２次元配列データ領域を解放する関数
 *
 * 入力
 *	a : ２次元配列データ
 *
 * 戻り値
 *	なし
 * ************************************************************************* */
void
free_array_data (double	**a,
		 int	row) {
  int	n;

  for (n = 0; n < row; n++) delete[] a[n];
  delete[] a;
}

/* ************************************************************************* *
 * 標準画像座標系(I-J)からX-Y画像座標系へ変換する関数
 *
 * 入力
 *	X  : 特徴点データ	
 *	i0 : 画像中心のI座標(垂直方向)
 *	j0 : 画像中心のJ座標(水平方向)
 *	F0 : デフォルト焦点距離
 *
 * 戻り値
 *	なし
 * ************************************************************************* */
void
convert_coordinate_IJ_to_XY (Matrix&	X,
			     double	i0,
			     double	j0,
			     double	F0) {
  int		n;
  double	i, j;
  
  for (n = 0; n < X.Column(); n++) {
    j = X[0][n];
    i = X[1][n];
    X[0][n] = I_TO_X (i, i0) / F0;
    X[1][n] = J_TO_Y (j, j0) / F0;
    if (X.Row() > 2) X[2][n] /= F0;
  }
}

/* ************************************************************************* *
 * X-Y画像座標系から標準画像座標系(I-J)へ変換する関数
 *
 * 入力
 *	X  : 特徴点データ	
 *	i0 : 画像中心のI座標(垂直方向)
 *	j0 : 画像中心のJ座標(水平方向)
 *	F0 : デフォルト焦点距離
 *
 * 戻り値
 *	なし
 * ************************************************************************* */
void
convert_coordinate_XY_to_IJ (Matrix&	X,
			     double	i0,
			     double	j0,
			     double	F0) {
  int		n;
  double	x, y;
  
  for (n = 0; n < X.Column(); n++) {
    x = X[0][n] * F0;
    y = X[1][n] * F0;
    if (X.Row() > 2) X[2][n] *= F0;
    X[1][n] = X_TO_I (x, i0);
    X[0][n] = Y_TO_J (y, j0);
  }
}

/* ************************************************ End of extensions.cc *** */
